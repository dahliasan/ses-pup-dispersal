# across(c(topo:ice, chl, chlgrad, dist_to_ice_m), mean, na.rm = T),
across(c(blackmass, weanmass, bearing_diff, ew_zone, compass_zone, compass_zone.pt), first),
# g_sd = sd(g),
# g_mean = mean(g),
# g_propARS = sum(g<=0.5)/n(),
is_ESE = ifelse(compass_zone == "E-SE", TRUE, FALSE))
dat <- dat %>% filter(!is.na(weanmass), !is.na(is_ESE))
# seals that survived 1st trip
table(dat$surviveTrip1 == TRUE)
table(dat$year)
options(na.action = 'na.omit')
m.global <- glm(surviveTrip1 ~ weanmass*is_ESE + year, data = dat, family = binomial)
options(na.action = 'na.fail')
summary(m.global)
dd <- dredge(m.global)
dd
avgmod.2delta <- model.avg(dd, subset = delta < 2, fit = TRUE)
summary(avgmod.2delta)
importance(avgmod.2delta)
m.final <- glm(surviveTrip1 ~  is_ESE, data = dat, family = binomial)
summary(m.final)
effects::allEffects(m.final) %>% plot()
simulationOutput <- simulateResiduals(fittedModel = m.global, n = 1000)
plot(simulationOutput)
# ~ plot avg model --------------------------------------------------------
a <- tibble(is_ESE = TRUE, weanmass = dat$weanmass)
b <- tibble(is_ESE = FALSE, weanmass = dat$weanmass)
pred <- predict(avgmod.2delta, newdata = a, se.fit = TRUE) %>% as_tibble() %>%
bind_cols(tibble(is_ESE = TRUE, weanmass = dat$weanmass))
pred <- pred %>% bind_rows(
predict(avgmod.2delta, newdata = b, se.fit = TRUE) %>% as_tibble() %>% bind_cols(tibble(is_ESE = FALSE, weanmass = dat$weanmass))
)
# png('./output/survival model/1st trip survival -- avg model effects.png', width=15, height=15, units='cm', res=500)
ggplot(data = pred, aes(x = is_ESE, group = is_ESE)) +
geom_point(aes(y = fit)) +
geom_errorbar(aes(ymin = fit-se.fit, ymax = fit+se.fit), width = .1) +
labs(y = "1st trip survival", x = "travelled with the flow") +
theme_pubr(border = T)
# Set the plot dimensions in inches
width <- 9 # 3 inches x 3
height <- 6 # 2 inches x 3
# Set the resolution in dots per inch
res <- 300
poster_theme <-   theme(text = element_text(family = "Inter", size = 18))
png('./output/poster/survival model/1st trip survival -- avg model effects.png', width=6, height=6, units='in', res=res)
ggplot(data = pred, aes(x = is_ESE, group = is_ESE)) +
geom_point(aes(y = fit)) +
geom_errorbar(aes(ymin = fit-se.fit, ymax = fit+se.fit), width = .1) +
labs(y = "1st trip survival", x = "travelled with the flow") +
theme_pubr(border = T) + poster_theme
dev.off()
png('./output/poster/1st trip survival -- avg model effects.png', width=6, height=6, units='in', res=res)
ggplot(data = pred, aes(x = is_ESE, group = is_ESE)) +
geom_point(aes(y = fit)) +
geom_errorbar(aes(ymin = fit-se.fit, ymax = fit+se.fit), width = .1) +
labs(y = "1st trip survival", x = "travelled with the flow") +
theme_pubr(border = T) + poster_theme
dev.off()
png('./output/poster/1st trip survival -- avg model effects.png', width=6, height=6, units='in', res=res)
ggplot(data = pred, aes(x = is_ESE, group = is_ESE)) +
geom_point(aes(y = fit)) +
geom_errorbar(aes(ymin = fit-se.fit, ymax = fit+se.fit), width = .1) +
labs(y = "1st trip survival", x = "Travelled with the flow") +
theme_pubr(border = T) + poster_theme
dev.off()
a <- tibble(is_ESE = TRUE, weanmass = dat$weanmass)
b <- tibble(is_ESE = FALSE, weanmass = dat$weanmass)
pred <- predict(avgmod.2delta, newdata = a, se.fit = TRUE) %>% as_tibble() %>%
bind_cols(tibble(is_ESE = TRUE, weanmass = dat$weanmass))
pred <- pred %>% bind_rows(
predict(avgmod.2delta, newdata = b, se.fit = TRUE) %>% as_tibble() %>% bind_cols(tibble(is_ESE = FALSE, weanmass = dat$weanmass))
)
# config facet labels
withFlow_labs <- c("is_ESE = FALSE", "is_ESE = TRUE")
names(withFlow_labs) <- c("FALSE", "TRUE")
# png('./output/survival model/1st year survival -- avg model effects.png', width=20, height=13, units='cm', res=500)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines"))
# + 1st year survival -----------------------------------------------------
# seals that survived 1st year
table(dat$surviveYear1 == TRUE)
options(na.action = 'na.omit')
m.global <- glm(surviveYear1 ~ weanmass*is_ESE + year, data = dat, family = binomial)
options(na.action = 'na.fail')
dd <- dredge(m.global)
dd
avgmod.2delta <- model.avg(dd, subset = delta < 2, fit = TRUE)
summary(avgmod.2delta)
importance(avgmod.2delta)
# Test assumptions
m.final <- glm(surviveYear1 ~  weanmass*is_ESE, data = dat, family = binomial)
summary(m.final)
effects::allEffects(m.final) %>% plot()
simulationOutput <- simulateResiduals(fittedModel = m.global, n = 1000)
plot(simulationOutput)
# ~ plot avg model --------------------------------------------------------
a <- tibble(is_ESE = TRUE, weanmass = dat$weanmass)
b <- tibble(is_ESE = FALSE, weanmass = dat$weanmass)
pred <- predict(avgmod.2delta, newdata = a, se.fit = TRUE) %>% as_tibble() %>%
bind_cols(tibble(is_ESE = TRUE, weanmass = dat$weanmass))
pred <- pred %>% bind_rows(
predict(avgmod.2delta, newdata = b, se.fit = TRUE) %>% as_tibble() %>% bind_cols(tibble(is_ESE = FALSE, weanmass = dat$weanmass))
)
# config facet labels
withFlow_labs <- c("is_ESE = FALSE", "is_ESE = TRUE")
names(withFlow_labs) <- c("FALSE", "TRUE")
# png('./output/survival model/1st year survival -- avg model effects.png', width=20, height=13, units='cm', res=500)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines"))
png('./output/poster/1st year survival -- avg model effects.png', width=6, height=6, units='in', res=res)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines")) + poster_theme
dev.off()
png('./output/poster/1st year survival -- avg model effects.png', width=8, height=6, units='in', res=res)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines")) + poster_theme
dev.off()
png('./output/poster/1st year survival -- avg model effects.png', width=9, height=6, units='in', res=res)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines")) + poster_theme
dev.off()
png('./output/poster/1st year survival -- avg model effects.png', width=12, height=6, units='in', res=res)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "Weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines")) + poster_theme
dev.off()
withFlow_labs <- c("swam against current", "swam with current")
names(withFlow_labs) <- c("FALSE", "TRUE")
png('./output/poster/1st year survival -- avg model effects.png', width=12, height=6, units='in', res=res)
ggplot(data = pred, aes(x = weanmass)) +
geom_line(aes(y = fit)) +
# geom_point(aes(y = fit)) +
geom_ribbon(aes(ymin = fit-se.fit, ymax = fit+se.fit), alpha = 0.1) +
facet_wrap(~is_ESE, labeller = labeller(is_ESE = withFlow_labs)) +
labs(y = "1st year survival", x = "Weanmass (kg)") +
theme_pubr(border = T) +
theme(panel.spacing = unit(2, "lines")) + poster_theme
dev.off()
rm(list = ls())
library(tidyverse)
library(sf)
# devtools::install_github("ianjonsen/ssmTMB")
# devtools::install_github("SCAR/RAATD/R/duckConfit")
library(duckConfit)
# Read animal tracks
locw <- readRDS("./Output/tracks_processed_12h.rds") %>%
filter(trip == 1) %>%
mutate(
group = str_sub(id, 1, 3),
lon = duckConfit::unwrapLon(lon),
) %>%
st_drop_geometry()
datasets_info <- locw %>%
group_by(group) %>%
summarise(
start_date = min(date),
end_date = max(date),
min_lon = min(lon),
max_lon = max(lon),
min_lat = min(lat),
max_lat = max(lat)
)
library(reticulate)
# Create virtual env if it doesn't exist
if (!virtualenv_exists("CopernicusMarine")) {
virtualenv_create(envname = "CopernicusMarine")
virtualenv_install("CopernicusMarine", packages = c("copernicusmarine"))
}
# Use try-catch to handle potential errors when activating the virtual environment
tryCatch(
{
use_virtualenv("CopernicusMarine", required = TRUE)
},
error = function(e) {
stop("Error activating virtual environment: ", e$message)
}
)
download_dataset <- function(group_data) {
tryCatch(
{
cmt <- import("copernicusmarine")
# Set login credentials (uncomment and replace with actual credentials)
# cmt$login("your_username", "your_password")
# cmt$login("dfoo1", "soAFO9UK1HllL22%fa%j")
cmt$subset(
dataset_id = "cmems_mod_glo_phy_my_0.083deg_P1D-m",
variables = list("uo", "vo"),
minimum_longitude = group_data$min_lon,
maximum_longitude = group_data$max_lon,
minimum_latitude = group_data$min_lat,
maximum_latitude = group_data$max_lat,
start_datetime = format(group_data$start_date, "%Y-%m-%dT%H:%M:%S"),
end_datetime = format(group_data$end_date, "%Y-%m-%dT%H:%M:%S"),
minimum_depth = 200,
maximum_depth = 200,
output_filename = paste0("data/copernicus_", group_data$group, "_", group_data$start_date, "_", group_data$end_date, "_200m.nc")
)
},
error = function(e) {
warning("Error processing group ", group_data$group, ": ", e$message)
}
)
}
# Parallel execution using mclapply
library(parallel)
num_cores <- detectCores() - 2 # Use all but one core
mclapply(1:nrow(datasets_info), function(i) {
download_dataset(datasets_info[i, ])
}, mc.cores = num_cores)
group_data[1,]
group_data <- datasets_info[1,]
group_data
cmt <- import("copernicusmarine")
cmt$subset(
dataset_id = "cmems_mod_glo_phy_my_0.083deg_P1D-m",
variables = list("uo", "vo"),
minimum_latitude = group_data$min_lat - 1,
maximum_latitude = group_data$max_lat + 1,
start_datetime = format(group_data$start_date, "%Y-%m-%dT%H:%M:%S"),
end_datetime = format(group_data$end_date, "%Y-%m-%dT%H:%M:%S"),
minimum_depth = 200,
maximum_depth = 200,
output_filename = paste0("data/copernicus_", group_data$group, "_", group_data$start_date, "_", group_data$end_date, "_200m.nc")
)
Y
datasets_info[2:nrow(datasets_info)]
datasets_info[2:nrow(datasets_info),]
walk(datasets_info[2:nrow(datasets_info),], download_dataset)
?purrr::walk
datasets_info[2:nrow(datasets_info)] %>%
group_split(group)
datasets_info[2:nrow(datasets_info)]
# Read animal tracks
locw <- readRDS("./Output/tracks_processed_12h.rds") %>%
filter(trip == 1) %>%
mutate(
group = str_sub(id, 1, 3),
lon = duckConfit::unwrapLon(lon),
) %>%
st_drop_geometry()
datasets_info <- locw %>%
group_by(group) %>%
summarise(
start_date = min(date),
end_date = max(date),
min_lon = min(lon),
max_lon = max(lon),
min_lat = min(lat),
max_lat = max(lat)
)
datasets_info
datasets_info <- locw %>%
group_by(group) %>%
summarise(
start_date = min(date) %>% as.Date(),
end_date = max(date) %>% as.Date(),
min_lon = min(lon),
max_lon = max(lon),
min_lat = min(lat),
max_lat = max(lat)
)
datasets_info
format(datasets_info$start_date, "%Y-%m-%dT%H:%M:%S")
download_dataset <- function(group_data) {
tryCatch(
{
cmt <- import("copernicusmarine")
# Set login credentials (uncomment and replace with actual credentials)
# cmt$login("your_username", "your_password")
# cmt$login("dfoo1", "soAFO9UK1HllL22%fa%j")
cmt$subset(
dataset_id = "cmems_mod_glo_phy_my_0.083deg_P1D-m",
variables = list("uo", "vo"),
minimum_latitude = group_data$min_lat - 1,
maximum_latitude = group_data$max_lat + 1,
start_datetime = format(group_data$start_date, "%Y-%m-%dT%H:%M:%S"),
end_datetime = format(group_data$end_date, "%Y-%m-%dT%H:%M:%S"),
minimum_depth = 200,
maximum_depth = 200,
output_filename = paste0("data/copernicus_", group_data$group, "_", group_data$start_date, "_", group_data$end_date, "_200m.nc")
)
},
error = function(e) {
warning("Error processing group ", group_data$group, ": ", e$message)
}
)
}
datasets_info[2:nrow(datasets_info)] %>%
group_split(group)
datasets_info[2:nrow(datasets_info),] %>%
group_split(group)
datasets_info[2:nrow(datasets_info),] %>%
group_split(group) %>%
purrr::walk(download_dataset)
y
y
y
knitr::opts_chunk$set(echo = TRUE)
options(width = 10000)
library(tidyverse)
library(circular)
library(sf)
library(move)
library(conflicted)
library(patchwork)
library(skimr)
library(gtsummary)
library(gt)
library(gtExtras)
library(summarytools)
library(GGally)
library(broom)
library(DHARMa)
library(MuMIn)
conflicts_prefer(dplyr::filter, dplyr::select, dplyr::mutate, dplyr::group_by)
# Define output folder
output_folder <- "output/dispersal_analysis_3"
# Create the output folder if it doesn't exist
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)
#| output: false
seal_data_path <- "./Output/tracks_processed_12h.rds"
female_data_path <- "data/adult_female_locs.rds"
particle_data_path <- "./Output/particle-trace-186.13m.rds"
surface_particle_data_path <- "./Output/currently_particleTrace.rds"
source("code/functions/functions.R")
getwd()
#| output: false
seal_data_path <- "./Output/tracks_processed_12h.rds"
female_data_path <- "data/adult_female_locs.rds"
particle_data_path <- "./Output/particle-trace-186.13m.rds"
surface_particle_data_path <- "./Output/currently_particleTrace.rds"
source("./code/functions/functions.R")
source("code/functions/functions.R")
#| output: false
seal_data_path <- "./Output/tracks_processed_12h.rds"
female_data_path <- "data/adult_female_locs.rds"
particle_data_path <- "./Output/particle-trace-186.13m.rds"
surface_particle_data_path <- "./Output/currently_particleTrace.rds"
source("code/functions/functions.R")
#| output: false
seal_data_path <- "./Output/tracks_processed_12h.rds"
female_data_path <- "data/adult_female_locs.rds"
particle_data_path <- "./Output/particle-trace-186.13m.rds"
surface_particle_data_path <- "./Output/currently_particleTrace.rds"
source("/code/functions/functions.R")
getwd()
ls()
dir()
dir("code")
#| output: false
seal_data_path <- "./Output/tracks_processed_12h.rds"
female_data_path <- "data/adult_female_locs.rds"
particle_data_path <- "./Output/particle-trace-186.13m.rds"
surface_particle_data_path <- "./Output/currently_particleTrace.rds"
source("code/functions/functions.R")
knitr::opts_chunk$set(echo = TRUE)
options(width = 10000)
library(tidyverse)
library(circular)
library(sf)
library(move)
library(conflicted)
library(patchwork)
library(skimr)
library(gtsummary)
library(gt)
library(gtExtras)
library(summarytools)
library(GGally)
library(broom)
library(DHARMa)
library(MuMIn)
library(here)
conflicts_prefer(dplyr::filter, dplyr::select, dplyr::mutate, dplyr::group_by)
theme_set(theme_bw())
# Define output folder
output_folder <- here("output", "dispersal_analysis_3")
# Create the output folder if it doesn't exist
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)
#| output: false
seal_data_path <- here("output", "tracks_processed_12h.rds")
female_data_path <- here("data", "adult_female_locs.rds")
particle_data_path <- here("output", "particle-trace-186.13m.rds")
surface_particle_data_path <- here("output", "currently_particleTrace.rds")
source(here("code", "functions", "functions.R"))
#| output: false
seal_data_path <- here("output", "tracks_processed_12h.rds")
female_data_path <- here("data", "adult_female_locs.rds")
particle_data_path <- here("output", "particle-trace-186.13m.rds")
surface_particle_data_path <- here("output", "currently_particleTrace.rds")
source(here("code", "functions", "functions.R"))
colony <- cbind(158.95, -54.5)
# Include your function definitions
calculate_distance_from_start <- function(data, colony = cbind(158.95, -54.5)) {
data %>%
group_by(id) %>%
mutate(
distance_from_start = geosphere::distGeo(
cbind(colony[1], colony[2]),
cbind(lon, lat)
)
)
}
identify_outbound_trip <- function(data) {
data %>%
calculate_distance_from_start() %>%
group_by(id) %>%
arrange(id, date) %>%
mutate(
max_distance = max(distance_from_start),
is_outbound = distance_from_start <= max_distance & row_number() <= which.max(distance_from_start)
) %>%
ungroup()
}
normalize_longitude <- function(lon) {
((lon + 180) %% 360) - 180
}
interpolate_track <- function(data) {
data <- data %>% as.data.frame()
# Print the number of rows before processing
cat("Total rows before processing:", nrow(data), "\n")
processed_data <- data %>%
group_split(id) %>%
map_dfr(~ {
id <- .$id %>% unique()
cat("Processing ", id, "...\n")
initial_rows <- nrow(.)
do_interpolate <- FALSE
# Create move object
move_obj <- move(
x = .$lon,
y = .$lat,
time = .$date,
proj = CRS("+proj=longlat +datum=WGS84"),
data = .,
)
# Only interpolate if there are gaps larger than 1 day
time_diffs <- difftime(.$date, lag(.$date), units = "days") %>% as.numeric()
if (all(time_diffs %>% na.omit() != 1)) {
cat("time interval not 1 day. interpolating...\n")
do_interpolate <- TRUE
interpolated <- interpolateTime(move_obj, time = as.difftime(24, units = "hours"), spaceMethod = "greatcircle")
} else {
interpolated <- move_obj
}
result <- interpolated %>%
as_tibble() %>%
mutate(id = id, date = as.Date(date)) %>%
dplyr::select(-lon, -lat) %>%
rename(lon = coords.x1, lat = coords.x2) %>%
dplyr::select(id, date, lon, lat, everything())
if (do_interpolate) {
cat("interpolated from", initial_rows, "to", nrow(result), "rows\n")
}
return(result)
})
return(processed_data)
}
preprocess_track <- function(data) {
data %>%
mutate(lon = normalize_longitude(lon)) %>%
# drop_na(lon, lat) %>%
arrange(id, date) %>%
group_by(id) %>%
interpolate_track() %>%
calculate_bearings() %>%
mutate(bearing = make_circular(bearing)) %>%
identify_outbound_trip()
}
# Calculate days since start for each id
calculate_days_since_start <- function(data) {
data %>%
group_by(id) %>%
arrange(id, date) %>%
mutate(days_since_start = as.numeric(difftime(date, first(date), units = "days"))) %>%
ungroup()
}
